// <auto-generated />
using System;
using System.Collections.Generic;
using FBATrackerReact.Server.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FBATrackerReact.Server.Migrations
{
    [DbContext(typeof(FbaDbContext))]
    [Migration("20250420111104_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FBATrackerReact.Models.Amazon.AmazonProduct", b =>
                {
                    b.Property<string>("AmazonStandardIdentificationNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("AmazonStandardIdentificationNumber");

                    b.ToTable("amazon_products", (string)null);
                });

            modelBuilder.Entity("FBATrackerReact.Models.Product.ScrapedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AmazonProductAmazonStandardIdentificationNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Profit")
                        .HasColumnType("numeric");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AmazonProductAmazonStandardIdentificationNumber");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Profit");

                    b.ToTable("scraped_products", (string)null);
                });

            modelBuilder.Entity("FBATrackerReact.Models.Scrape.ScrapeJobSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Abandoned")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<DateTime>("Started")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartedPostProcessing")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Abandoned");

                    b.HasIndex("Ended");

                    b.HasIndex("Source");

                    b.HasIndex("Started");

                    b.ToTable("scrapes", (string)null);
                });

            modelBuilder.Entity("FBATrackerReact.Models.Amazon.AmazonProduct", b =>
                {
                    b.OwnsOne("FBATrackerReact.Models.Amazon.AmazonEligibility", "ProductEligibility", b1 =>
                        {
                            b1.Property<string>("OwnerAmazonStandardIdentificationNumber")
                                .HasColumnType("text");

                            b1.Property<string>("GatedOnwardUrl")
                                .HasColumnType("text");

                            b1.Property<bool>("IsGateLocked")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsRestricted")
                                .HasColumnType("boolean");

                            b1.PrimitiveCollection<List<string>>("RestrictedReason")
                                .HasColumnType("text[]");

                            b1.HasKey("OwnerAmazonStandardIdentificationNumber");

                            b1.ToTable("amazon_eligibility", (string)null);

                            b1.WithOwner("Owner")
                                .HasForeignKey("OwnerAmazonStandardIdentificationNumber");

                            b1.Navigation("Owner");
                        });

                    b.OwnsOne("FBATrackerReact.Models.Amazon.AmazonPricing", "ProductPricing", b1 =>
                        {
                            b1.Property<string>("OwnerAmazonStandardIdentificationNumber")
                                .HasColumnType("text");

                            b1.Property<decimal?>("Fees")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("HighestPrice")
                                .HasColumnType("numeric");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("LowestPreferredPrice")
                                .HasColumnType("numeric");

                            b1.HasKey("OwnerAmazonStandardIdentificationNumber");

                            b1.ToTable("amazon_pricing", (string)null);

                            b1.WithOwner("Owner")
                                .HasForeignKey("OwnerAmazonStandardIdentificationNumber");

                            b1.Navigation("Owner");
                        });

                    b.OwnsOne("FBATrackerReact.Models.Amazon.SellerAmpData", "SellerAmpData", b1 =>
                        {
                            b1.Property<string>("OwnerAmazonStandardIdentificationNumber")
                                .HasColumnType("text");

                            b1.Property<bool?>("BuyBox")
                                .HasColumnType("boolean");

                            b1.Property<string>("EstimatedSales")
                                .HasColumnType("text");

                            b1.Property<int?>("IntellectualProperty")
                                .HasColumnType("integer");

                            b1.Property<string>("IntellectualPropertyMessage")
                                .HasColumnType("text");

                            b1.Property<bool?>("Oversized")
                                .HasColumnType("boolean");

                            b1.Property<int?>("PrivateLabel")
                                .HasColumnType("integer");

                            b1.Property<string>("PrivateLabelMessage")
                                .HasColumnType("text");

                            b1.Property<int?>("ProductsInCategory")
                                .HasColumnType("integer");

                            b1.Property<int?>("SalesRank")
                                .HasColumnType("integer");

                            b1.HasKey("OwnerAmazonStandardIdentificationNumber");

                            b1.ToTable("amazon_amp", (string)null);

                            b1.WithOwner("Owner")
                                .HasForeignKey("OwnerAmazonStandardIdentificationNumber");

                            b1.Navigation("Owner");
                        });

                    b.OwnsOne("FBATrackerReact.Models.Product.ProductVisibility", "ProductVisibility", b1 =>
                        {
                            b1.Property<string>("OwnerAmazonStandardIdentificationNumber")
                                .HasColumnType("text");

                            b1.Property<int>("ProductList")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0);

                            b1.HasKey("OwnerAmazonStandardIdentificationNumber");

                            b1.ToTable("amazon_visibility", (string)null);

                            b1.WithOwner("Owner")
                                .HasForeignKey("OwnerAmazonStandardIdentificationNumber");

                            b1.Navigation("Owner");
                        });

                    b.Navigation("ProductEligibility");

                    b.Navigation("ProductPricing");

                    b.Navigation("ProductVisibility");

                    b.Navigation("SellerAmpData");
                });

            modelBuilder.Entity("FBATrackerReact.Models.Product.ScrapedProduct", b =>
                {
                    b.HasOne("FBATrackerReact.Models.Amazon.AmazonProduct", "AmazonProduct")
                        .WithMany("ReferencedProducts")
                        .HasForeignKey("AmazonProductAmazonStandardIdentificationNumber");

                    b.HasOne("FBATrackerReact.Models.Scrape.ScrapeJobSet", "Owner")
                        .WithMany("Products")
                        .HasForeignKey("OwnerId");

                    b.OwnsOne("FBATrackerReact.Models.Product.ScrapedProductReference", "ProductReference", b1 =>
                        {
                            b1.Property<Guid>("ScrapedProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Reference")
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ScrapedProductId");

                            b1.HasIndex("Reference");

                            b1.ToTable("scraped_products");

                            b1.WithOwner()
                                .HasForeignKey("ScrapedProductId");
                        });

                    b.Navigation("AmazonProduct");

                    b.Navigation("Owner");

                    b.Navigation("ProductReference");
                });

            modelBuilder.Entity("FBATrackerReact.Models.Amazon.AmazonProduct", b =>
                {
                    b.Navigation("ReferencedProducts");
                });

            modelBuilder.Entity("FBATrackerReact.Models.Scrape.ScrapeJobSet", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
